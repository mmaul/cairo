// Ported from cairo tutorial at http://cairographics.org/tutorial/
include "Cairo/cairo";
open Cairo;
open C_hack;

fun main () = {

  /* Prepare drawing area */
  var surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32, 240, 240);
  var cr = cairo_create (surface);

  /* Examples are in 26.0 x 1.0 coordinate space */
  cairo_scale (cr, 240.0, 240.0);
  cairo_set_font_size (cr, 0.5);

  /* Drawing code goes here */
  var px = 0.0;
  var ux=1.0; var uy=1.0; var dashlength=0.0;
  const M_PI:double requires C89_headers::math_h;
  var text = cast[&char](cstr("joy"));
  var fe:cairo_font_extents_t;
  var te:cairo_text_extents_t;

  cairo_set_source_rgb (cr, 0.0, 0.0, 0.0);
  cairo_select_font_face (cr,cast[&char](cstr("Georgia")),
			CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_BOLD);
  cairo_font_extents (cr, &fe);

  cairo_device_to_user_distance (cr, &ux, &uy);
  if (ux > uy) do
    px = ux;
  else
    px = uy;
  done
  cairo_font_extents (cr, &fe);
  cairo_text_extents (cr, text, &te);
  var x = 0.5 - te.x_bearing - te.width / 2.0;
  var y = 0.5 - fe.descent + fe.height / 2.0;

  /* baseline, descent, ascent, height */
  cairo_set_line_width (cr, 4.0*px);
  dashlength = 9.0*px;
  cairo_set_dash (cr, &dashlength, 1, 0.0);
  cairo_set_source_rgba (cr, 0.0, 0.6, 0.0, 0.5);
  cairo_move_to (cr, x + te.x_bearing, y);
  cairo_rel_line_to (cr, te.width, 0.0);
  cairo_move_to (cr, x + te.x_bearing, y + fe.descent);
  cairo_rel_line_to (cr, te.width, 0.0);
  cairo_move_to (cr, x + te.x_bearing, y - fe.ascent);
  cairo_rel_line_to (cr, te.width, 0.0);
  cairo_move_to (cr, x + te.x_bearing, y - fe.height);
  cairo_rel_line_to (cr, te.width, 0.0);
  cairo_stroke (cr);

  /* extents: width & height */
  cairo_set_source_rgba (cr, 0.0, 0.0, 0.75, 0.5);
  cairo_set_line_width (cr, px);
  dashlength = 3.0*px;
  cairo_set_dash (cr, &dashlength, 1, 0.0);
  cairo_rectangle (cr, x + te.x_bearing, y + te.y_bearing, te.width, te.height);
  cairo_stroke (cr);

  /* text */
  cairo_move_to (cr, x, y);
  cairo_set_source_rgb (cr, 0.0, 0.0, 0.0);
  cairo_show_text (cr, text);

  /* bearing */
  cairo_set_dash (cr, null[double], 0, 0.0);
  cairo_set_line_width (cr, 2.0 * px);
  cairo_set_source_rgba (cr, 0.0, 0.0, 0.75, 0.5);
  cairo_move_to (cr, x, y);
  cairo_rel_line_to (cr, te.x_bearing, te.y_bearing);
  cairo_stroke (cr);

  /* text's advance */
  cairo_set_source_rgba (cr, 0.0, 0.0, 0.75, 0.5);
  cairo_arc (cr, x + te.x_advance, y + te.y_advance, 5.0 * px, 0.0, 
    2.0 * M_PI);
  cairo_fill (cr);

  /* reference point */
  cairo_arc (cr, x, y, 5.0 * px, 0.0, 2.0 * M_PI);
  cairo_set_source_rgba (cr, 0.75, 0.0, 0.0, 0.5);
  cairo_fill (cr);


  /* Write output and clean up */
  ignore(cairo_surface_write_to_png (surface, cast[&char](cstr("textextents.png"))));
  cairo_destroy (cr);
  cairo_surface_destroy (surface);

  return 0;
}

System::exit(main());